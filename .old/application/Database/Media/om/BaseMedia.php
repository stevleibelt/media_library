<?php

namespace Database\Media\om;

use \BaseObject;
use \BasePeer;
use \Criteria;
use \DateTime;
use \Exception;
use \PDO;
use \Persistent;
use \Propel;
use \PropelCollection;
use \PropelDateTime;
use \PropelException;
use \PropelObjectCollection;
use \PropelPDO;
use Database\Media\Audio;
use Database\Media\AudioQuery;
use Database\Media\Book;
use Database\Media\BookQuery;
use Database\Media\Comment;
use Database\Media\CommentQuery;
use Database\Media\Distributor;
use Database\Media\DistributorQuery;
use Database\Media\Edition;
use Database\Media\EditionQuery;
use Database\Media\Game;
use Database\Media\GameQuery;
use Database\Media\Media;
use Database\Media\MediaPeer;
use Database\Media\MediaQuery;
use Database\Media\MediaToArtist;
use Database\Media\MediaToArtistQuery;
use Database\Media\MediaToGenre;
use Database\Media\MediaToGenreQuery;
use Database\Media\MediaToLanguage;
use Database\Media\MediaToLanguageQuery;
use Database\Media\Type;
use Database\Media\TypeQuery;
use Database\Media\Video;
use Database\Media\VideoQuery;
use Database\User\User;
use Database\User\UserQuery;

/**
 * Base class that represents a row from the 'net_bazzline_media_library_media_common' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.1 on:
 *
 * Wed Oct  1 21:22:55 2014
 *
 * @package    propel.generator.Media.om
 */
abstract class BaseMedia extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'Database\\Media\\MediaPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        MediaPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinite loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        string
     */
    protected $id;

    /**
     * The value for the distributor_id field.
     * @var        string
     */
    protected $distributor_id;

    /**
     * The value for the edition_id field.
     * @var        string
     */
    protected $edition_id;

    /**
     * The value for the type_id field.
     * @var        string
     */
    protected $type_id;

    /**
     * The value for the user_id field.
     * @var        string
     */
    protected $user_id;

    /**
     * The value for the age_limit field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $age_limit;

    /**
     * The value for the create_date field.
     * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
     * @var        string
     */
    protected $create_date;

    /**
     * The value for the release_date field.
     * Note: this column has a database default value of: NULL
     * @var        string
     */
    protected $release_date;

    /**
     * The value for the name field.
     * @var        string
     */
    protected $name;

    /**
     * @var        Distributor
     */
    protected $aDistributor;

    /**
     * @var        Edition
     */
    protected $aEdition;

    /**
     * @var        Type
     */
    protected $aType;

    /**
     * @var        User
     */
    protected $aUser;

    /**
     * @var        PropelObjectCollection|Audio[] Collection to store aggregation of Audio objects.
     */
    protected $collAudios;
    protected $collAudiosPartial;

    /**
     * @var        PropelObjectCollection|Book[] Collection to store aggregation of Book objects.
     */
    protected $collBooks;
    protected $collBooksPartial;

    /**
     * @var        PropelObjectCollection|Video[] Collection to store aggregation of Video objects.
     */
    protected $collVideos;
    protected $collVideosPartial;

    /**
     * @var        PropelObjectCollection|Game[] Collection to store aggregation of Game objects.
     */
    protected $collGames;
    protected $collGamesPartial;

    /**
     * @var        PropelObjectCollection|Comment[] Collection to store aggregation of Comment objects.
     */
    protected $collComments;
    protected $collCommentsPartial;

    /**
     * @var        PropelObjectCollection|MediaToArtist[] Collection to store aggregation of MediaToArtist objects.
     */
    protected $collMediaToArtists;
    protected $collMediaToArtistsPartial;

    /**
     * @var        PropelObjectCollection|MediaToGenre[] Collection to store aggregation of MediaToGenre objects.
     */
    protected $collMediaToGenres;
    protected $collMediaToGenresPartial;

    /**
     * @var        PropelObjectCollection|MediaToLanguage[] Collection to store aggregation of MediaToLanguage objects.
     */
    protected $collMediaToLanguages;
    protected $collMediaToLanguagesPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Flag to prevent endless clearAllReferences($deep=true) loop, if this object is referenced
     * @var        boolean
     */
    protected $alreadyInClearAllReferencesDeep = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $audiosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $booksScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $videosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $gamesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commentsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mediaToArtistsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mediaToGenresScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $mediaToLanguagesScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->age_limit = 0;
        $this->release_date = NULL;
    }

    /**
     * Initializes internal state of BaseMedia object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return string
     */
    public function getId()
    {

        return $this->id;
    }

    /**
     * Get the [distributor_id] column value.
     *
     * @return string
     */
    public function getDistributorId()
    {

        return $this->distributor_id;
    }

    /**
     * Get the [edition_id] column value.
     *
     * @return string
     */
    public function getEditionId()
    {

        return $this->edition_id;
    }

    /**
     * Get the [type_id] column value.
     *
     * @return string
     */
    public function getTypeId()
    {

        return $this->type_id;
    }

    /**
     * Get the [user_id] column value.
     *
     * @return string
     */
    public function getUserId()
    {

        return $this->user_id;
    }

    /**
     * Get the [age_limit] column value.
     *
     * @return int
     */
    public function getAgeLimit()
    {

        return $this->age_limit;
    }

    /**
     * Get the [optionally formatted] temporal [create_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreateDate($format = 'Y-m-d H:i:s')
    {
        if ($this->create_date === null) {
            return null;
        }

        if ($this->create_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->create_date);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->create_date, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [optionally formatted] temporal [release_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getReleaseDate($format = 'Y-m-d H:i:s')
    {
        if ($this->release_date === null) {
            return null;
        }

        if ($this->release_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->release_date);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->release_date, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);

    }

    /**
     * Get the [name] column value.
     *
     * @return string
     */
    public function getName()
    {

        return $this->name;
    }

    /**
     * Set the value of [id] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = MediaPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [distributor_id] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setDistributorId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->distributor_id !== $v) {
            $this->distributor_id = $v;
            $this->modifiedColumns[] = MediaPeer::DISTRIBUTOR_ID;
        }

        if ($this->aDistributor !== null && $this->aDistributor->getId() !== $v) {
            $this->aDistributor = null;
        }


        return $this;
    } // setDistributorId()

    /**
     * Set the value of [edition_id] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setEditionId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->edition_id !== $v) {
            $this->edition_id = $v;
            $this->modifiedColumns[] = MediaPeer::EDITION_ID;
        }

        if ($this->aEdition !== null && $this->aEdition->getId() !== $v) {
            $this->aEdition = null;
        }


        return $this;
    } // setEditionId()

    /**
     * Set the value of [type_id] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setTypeId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->type_id !== $v) {
            $this->type_id = $v;
            $this->modifiedColumns[] = MediaPeer::TYPE_ID;
        }

        if ($this->aType !== null && $this->aType->getId() !== $v) {
            $this->aType = null;
        }


        return $this;
    } // setTypeId()

    /**
     * Set the value of [user_id] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setUserId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->user_id !== $v) {
            $this->user_id = $v;
            $this->modifiedColumns[] = MediaPeer::USER_ID;
        }

        if ($this->aUser !== null && $this->aUser->getId() !== $v) {
            $this->aUser = null;
        }


        return $this;
    } // setUserId()

    /**
     * Set the value of [age_limit] column.
     *
     * @param  int $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setAgeLimit($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->age_limit !== $v) {
            $this->age_limit = $v;
            $this->modifiedColumns[] = MediaPeer::AGE_LIMIT;
        }


        return $this;
    } // setAgeLimit()

    /**
     * Sets the value of [create_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Media The current object (for fluent API support)
     */
    public function setCreateDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->create_date !== null || $dt !== null) {
            $currentDateAsString = ($this->create_date !== null && $tmpDt = new DateTime($this->create_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->create_date = $newDateAsString;
                $this->modifiedColumns[] = MediaPeer::CREATE_DATE;
            }
        } // if either are not null


        return $this;
    } // setCreateDate()

    /**
     * Sets the value of [release_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Media The current object (for fluent API support)
     */
    public function setReleaseDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->release_date !== null || $dt !== null) {
            $currentDateAsString = ($this->release_date !== null && $tmpDt = new DateTime($this->release_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ( ($currentDateAsString !== $newDateAsString) // normalized values don't match
                || ($dt->format('Y-m-d H:i:s') === NULL) // or the entered value matches the default
                 ) {
                $this->release_date = $newDateAsString;
                $this->modifiedColumns[] = MediaPeer::RELEASE_DATE;
            }
        } // if either are not null


        return $this;
    } // setReleaseDate()

    /**
     * Set the value of [name] column.
     *
     * @param  string $v new value
     * @return Media The current object (for fluent API support)
     */
    public function setName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->name !== $v) {
            $this->name = $v;
            $this->modifiedColumns[] = MediaPeer::NAME;
        }


        return $this;
    } // setName()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->age_limit !== 0) {
                return false;
            }

            if ($this->release_date !== NULL) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which resultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
            $this->distributor_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->edition_id = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->type_id = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->user_id = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->age_limit = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->create_date = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->release_date = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->name = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }
            $this->postHydrate($row, $startcol, $rehydrate);

            return $startcol + 9; // 9 = MediaPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Media object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aDistributor !== null && $this->distributor_id !== $this->aDistributor->getId()) {
            $this->aDistributor = null;
        }
        if ($this->aEdition !== null && $this->edition_id !== $this->aEdition->getId()) {
            $this->aEdition = null;
        }
        if ($this->aType !== null && $this->type_id !== $this->aType->getId()) {
            $this->aType = null;
        }
        if ($this->aUser !== null && $this->user_id !== $this->aUser->getId()) {
            $this->aUser = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(MediaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = MediaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aDistributor = null;
            $this->aEdition = null;
            $this->aType = null;
            $this->aUser = null;
            $this->collAudios = null;

            $this->collBooks = null;

            $this->collVideos = null;

            $this->collGames = null;

            $this->collComments = null;

            $this->collMediaToArtists = null;

            $this->collMediaToGenres = null;

            $this->collMediaToLanguages = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(MediaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = MediaQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(MediaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                MediaPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their corresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aDistributor !== null) {
                if ($this->aDistributor->isModified() || $this->aDistributor->isNew()) {
                    $affectedRows += $this->aDistributor->save($con);
                }
                $this->setDistributor($this->aDistributor);
            }

            if ($this->aEdition !== null) {
                if ($this->aEdition->isModified() || $this->aEdition->isNew()) {
                    $affectedRows += $this->aEdition->save($con);
                }
                $this->setEdition($this->aEdition);
            }

            if ($this->aType !== null) {
                if ($this->aType->isModified() || $this->aType->isNew()) {
                    $affectedRows += $this->aType->save($con);
                }
                $this->setType($this->aType);
            }

            if ($this->aUser !== null) {
                if ($this->aUser->isModified() || $this->aUser->isNew()) {
                    $affectedRows += $this->aUser->save($con);
                }
                $this->setUser($this->aUser);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->audiosScheduledForDeletion !== null) {
                if (!$this->audiosScheduledForDeletion->isEmpty()) {
                    AudioQuery::create()
                        ->filterByPrimaryKeys($this->audiosScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->audiosScheduledForDeletion = null;
                }
            }

            if ($this->collAudios !== null) {
                foreach ($this->collAudios as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->booksScheduledForDeletion !== null) {
                if (!$this->booksScheduledForDeletion->isEmpty()) {
                    BookQuery::create()
                        ->filterByPrimaryKeys($this->booksScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->booksScheduledForDeletion = null;
                }
            }

            if ($this->collBooks !== null) {
                foreach ($this->collBooks as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->videosScheduledForDeletion !== null) {
                if (!$this->videosScheduledForDeletion->isEmpty()) {
                    VideoQuery::create()
                        ->filterByPrimaryKeys($this->videosScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->videosScheduledForDeletion = null;
                }
            }

            if ($this->collVideos !== null) {
                foreach ($this->collVideos as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->gamesScheduledForDeletion !== null) {
                if (!$this->gamesScheduledForDeletion->isEmpty()) {
                    GameQuery::create()
                        ->filterByPrimaryKeys($this->gamesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->gamesScheduledForDeletion = null;
                }
            }

            if ($this->collGames !== null) {
                foreach ($this->collGames as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commentsScheduledForDeletion !== null) {
                if (!$this->commentsScheduledForDeletion->isEmpty()) {
                    CommentQuery::create()
                        ->filterByPrimaryKeys($this->commentsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commentsScheduledForDeletion = null;
                }
            }

            if ($this->collComments !== null) {
                foreach ($this->collComments as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mediaToArtistsScheduledForDeletion !== null) {
                if (!$this->mediaToArtistsScheduledForDeletion->isEmpty()) {
                    MediaToArtistQuery::create()
                        ->filterByPrimaryKeys($this->mediaToArtistsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->mediaToArtistsScheduledForDeletion = null;
                }
            }

            if ($this->collMediaToArtists !== null) {
                foreach ($this->collMediaToArtists as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mediaToGenresScheduledForDeletion !== null) {
                if (!$this->mediaToGenresScheduledForDeletion->isEmpty()) {
                    MediaToGenreQuery::create()
                        ->filterByPrimaryKeys($this->mediaToGenresScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->mediaToGenresScheduledForDeletion = null;
                }
            }

            if ($this->collMediaToGenres !== null) {
                foreach ($this->collMediaToGenres as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->mediaToLanguagesScheduledForDeletion !== null) {
                if (!$this->mediaToLanguagesScheduledForDeletion->isEmpty()) {
                    MediaToLanguageQuery::create()
                        ->filterByPrimaryKeys($this->mediaToLanguagesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->mediaToLanguagesScheduledForDeletion = null;
                }
            }

            if ($this->collMediaToLanguages !== null) {
                foreach ($this->collMediaToLanguages as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;


         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(MediaPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = 'id';
        }
        if ($this->isColumnModified(MediaPeer::DISTRIBUTOR_ID)) {
            $modifiedColumns[':p' . $index++]  = 'distributor_id';
        }
        if ($this->isColumnModified(MediaPeer::EDITION_ID)) {
            $modifiedColumns[':p' . $index++]  = 'edition_id';
        }
        if ($this->isColumnModified(MediaPeer::TYPE_ID)) {
            $modifiedColumns[':p' . $index++]  = 'type_id';
        }
        if ($this->isColumnModified(MediaPeer::USER_ID)) {
            $modifiedColumns[':p' . $index++]  = 'user_id';
        }
        if ($this->isColumnModified(MediaPeer::AGE_LIMIT)) {
            $modifiedColumns[':p' . $index++]  = 'age_limit';
        }
        if ($this->isColumnModified(MediaPeer::CREATE_DATE)) {
            $modifiedColumns[':p' . $index++]  = 'create_date';
        }
        if ($this->isColumnModified(MediaPeer::RELEASE_DATE)) {
            $modifiedColumns[':p' . $index++]  = 'release_date';
        }
        if ($this->isColumnModified(MediaPeer::NAME)) {
            $modifiedColumns[':p' . $index++]  = 'name';
        }

        $sql = sprintf(
            'INSERT INTO net_bazzline_media_library_media_common (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case 'id':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_STR);
                        break;
                    case 'distributor_id':
                        $stmt->bindValue($identifier, $this->distributor_id, PDO::PARAM_STR);
                        break;
                    case 'edition_id':
                        $stmt->bindValue($identifier, $this->edition_id, PDO::PARAM_STR);
                        break;
                    case 'type_id':
                        $stmt->bindValue($identifier, $this->type_id, PDO::PARAM_STR);
                        break;
                    case 'user_id':
                        $stmt->bindValue($identifier, $this->user_id, PDO::PARAM_STR);
                        break;
                    case 'age_limit':
                        $stmt->bindValue($identifier, $this->age_limit, PDO::PARAM_INT);
                        break;
                    case 'create_date':
                        $stmt->bindValue($identifier, $this->create_date, PDO::PARAM_STR);
                        break;
                    case 'release_date':
                        $stmt->bindValue($identifier, $this->release_date, PDO::PARAM_STR);
                        break;
                    case 'name':
                        $stmt->bindValue($identifier, $this->name, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        }

        $this->validationFailures = $res;

        return false;
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggregated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objects otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their corresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aDistributor !== null) {
                if (!$this->aDistributor->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aDistributor->getValidationFailures());
                }
            }

            if ($this->aEdition !== null) {
                if (!$this->aEdition->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aEdition->getValidationFailures());
                }
            }

            if ($this->aType !== null) {
                if (!$this->aType->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aType->getValidationFailures());
                }
            }

            if ($this->aUser !== null) {
                if (!$this->aUser->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
                }
            }


            if (($retval = MediaPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collAudios !== null) {
                    foreach ($this->collAudios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collBooks !== null) {
                    foreach ($this->collBooks as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collVideos !== null) {
                    foreach ($this->collVideos as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collGames !== null) {
                    foreach ($this->collGames as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collComments !== null) {
                    foreach ($this->collComments as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMediaToArtists !== null) {
                    foreach ($this->collMediaToArtists as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMediaToGenres !== null) {
                    foreach ($this->collMediaToGenres as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collMediaToLanguages !== null) {
                    foreach ($this->collMediaToLanguages as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = MediaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getDistributorId();
                break;
            case 2:
                return $this->getEditionId();
                break;
            case 3:
                return $this->getTypeId();
                break;
            case 4:
                return $this->getUserId();
                break;
            case 5:
                return $this->getAgeLimit();
                break;
            case 6:
                return $this->getCreateDate();
                break;
            case 7:
                return $this->getReleaseDate();
                break;
            case 8:
                return $this->getName();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Media'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Media'][$this->getPrimaryKey()] = true;
        $keys = MediaPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getDistributorId(),
            $keys[2] => $this->getEditionId(),
            $keys[3] => $this->getTypeId(),
            $keys[4] => $this->getUserId(),
            $keys[5] => $this->getAgeLimit(),
            $keys[6] => $this->getCreateDate(),
            $keys[7] => $this->getReleaseDate(),
            $keys[8] => $this->getName(),
        );
        $virtualColumns = $this->virtualColumns;
        foreach ($virtualColumns as $key => $virtualColumn) {
            $result[$key] = $virtualColumn;
        }

        if ($includeForeignObjects) {
            if (null !== $this->aDistributor) {
                $result['Distributor'] = $this->aDistributor->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aEdition) {
                $result['Edition'] = $this->aEdition->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aType) {
                $result['Type'] = $this->aType->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aUser) {
                $result['User'] = $this->aUser->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collAudios) {
                $result['Audios'] = $this->collAudios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collBooks) {
                $result['Books'] = $this->collBooks->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collVideos) {
                $result['Videos'] = $this->collVideos->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collGames) {
                $result['Games'] = $this->collGames->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collComments) {
                $result['Comments'] = $this->collComments->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMediaToArtists) {
                $result['MediaToArtists'] = $this->collMediaToArtists->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMediaToGenres) {
                $result['MediaToGenres'] = $this->collMediaToGenres->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collMediaToLanguages) {
                $result['MediaToLanguages'] = $this->collMediaToLanguages->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = MediaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setDistributorId($value);
                break;
            case 2:
                $this->setEditionId($value);
                break;
            case 3:
                $this->setTypeId($value);
                break;
            case 4:
                $this->setUserId($value);
                break;
            case 5:
                $this->setAgeLimit($value);
                break;
            case 6:
                $this->setCreateDate($value);
                break;
            case 7:
                $this->setReleaseDate($value);
                break;
            case 8:
                $this->setName($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = MediaPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setDistributorId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setEditionId($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setTypeId($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setUserId($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setAgeLimit($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCreateDate($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setReleaseDate($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setName($arr[$keys[8]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(MediaPeer::DATABASE_NAME);

        if ($this->isColumnModified(MediaPeer::ID)) $criteria->add(MediaPeer::ID, $this->id);
        if ($this->isColumnModified(MediaPeer::DISTRIBUTOR_ID)) $criteria->add(MediaPeer::DISTRIBUTOR_ID, $this->distributor_id);
        if ($this->isColumnModified(MediaPeer::EDITION_ID)) $criteria->add(MediaPeer::EDITION_ID, $this->edition_id);
        if ($this->isColumnModified(MediaPeer::TYPE_ID)) $criteria->add(MediaPeer::TYPE_ID, $this->type_id);
        if ($this->isColumnModified(MediaPeer::USER_ID)) $criteria->add(MediaPeer::USER_ID, $this->user_id);
        if ($this->isColumnModified(MediaPeer::AGE_LIMIT)) $criteria->add(MediaPeer::AGE_LIMIT, $this->age_limit);
        if ($this->isColumnModified(MediaPeer::CREATE_DATE)) $criteria->add(MediaPeer::CREATE_DATE, $this->create_date);
        if ($this->isColumnModified(MediaPeer::RELEASE_DATE)) $criteria->add(MediaPeer::RELEASE_DATE, $this->release_date);
        if ($this->isColumnModified(MediaPeer::NAME)) $criteria->add(MediaPeer::NAME, $this->name);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(MediaPeer::DATABASE_NAME);
        $criteria->add(MediaPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return string
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  string $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Media (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setDistributorId($this->getDistributorId());
        $copyObj->setEditionId($this->getEditionId());
        $copyObj->setTypeId($this->getTypeId());
        $copyObj->setUserId($this->getUserId());
        $copyObj->setAgeLimit($this->getAgeLimit());
        $copyObj->setCreateDate($this->getCreateDate());
        $copyObj->setReleaseDate($this->getReleaseDate());
        $copyObj->setName($this->getName());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getAudios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addAudio($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getBooks() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addBook($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getVideos() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addVideo($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getGames() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addGame($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getComments() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addComment($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMediaToArtists() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMediaToArtist($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMediaToGenres() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMediaToGenre($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getMediaToLanguages() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addMediaToLanguage($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Media Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return MediaPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new MediaPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Distributor object.
     *
     * @param                  Distributor $v
     * @return Media The current object (for fluent API support)
     * @throws PropelException
     */
    public function setDistributor(Distributor $v = null)
    {
        if ($v === null) {
            $this->setDistributorId(NULL);
        } else {
            $this->setDistributorId($v->getId());
        }

        $this->aDistributor = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Distributor object, it will not be re-added.
        if ($v !== null) {
            $v->addMedia($this);
        }


        return $this;
    }


    /**
     * Get the associated Distributor object
     *
     * @param PropelPDO $con Optional Connection object.
     * @param $doQuery Executes a query to get the object if required
     * @return Distributor The associated Distributor object.
     * @throws PropelException
     */
    public function getDistributor(PropelPDO $con = null, $doQuery = true)
    {
        if ($this->aDistributor === null && (($this->distributor_id !== "" && $this->distributor_id !== null)) && $doQuery) {
            $this->aDistributor = DistributorQuery::create()->findPk($this->distributor_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aDistributor->addMedias($this);
             */
        }

        return $this->aDistributor;
    }

    /**
     * Declares an association between this object and a Edition object.
     *
     * @param                  Edition $v
     * @return Media The current object (for fluent API support)
     * @throws PropelException
     */
    public function setEdition(Edition $v = null)
    {
        if ($v === null) {
            $this->setEditionId(NULL);
        } else {
            $this->setEditionId($v->getId());
        }

        $this->aEdition = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Edition object, it will not be re-added.
        if ($v !== null) {
            $v->addMedia($this);
        }


        return $this;
    }


    /**
     * Get the associated Edition object
     *
     * @param PropelPDO $con Optional Connection object.
     * @param $doQuery Executes a query to get the object if required
     * @return Edition The associated Edition object.
     * @throws PropelException
     */
    public function getEdition(PropelPDO $con = null, $doQuery = true)
    {
        if ($this->aEdition === null && (($this->edition_id !== "" && $this->edition_id !== null)) && $doQuery) {
            $this->aEdition = EditionQuery::create()->findPk($this->edition_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aEdition->addMedias($this);
             */
        }

        return $this->aEdition;
    }

    /**
     * Declares an association between this object and a Type object.
     *
     * @param                  Type $v
     * @return Media The current object (for fluent API support)
     * @throws PropelException
     */
    public function setType(Type $v = null)
    {
        if ($v === null) {
            $this->setTypeId(NULL);
        } else {
            $this->setTypeId($v->getId());
        }

        $this->aType = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Type object, it will not be re-added.
        if ($v !== null) {
            $v->addMedia($this);
        }


        return $this;
    }


    /**
     * Get the associated Type object
     *
     * @param PropelPDO $con Optional Connection object.
     * @param $doQuery Executes a query to get the object if required
     * @return Type The associated Type object.
     * @throws PropelException
     */
    public function getType(PropelPDO $con = null, $doQuery = true)
    {
        if ($this->aType === null && (($this->type_id !== "" && $this->type_id !== null)) && $doQuery) {
            $this->aType = TypeQuery::create()->findPk($this->type_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aType->addMedias($this);
             */
        }

        return $this->aType;
    }

    /**
     * Declares an association between this object and a User object.
     *
     * @param                  User $v
     * @return Media The current object (for fluent API support)
     * @throws PropelException
     */
    public function setUser(User $v = null)
    {
        if ($v === null) {
            $this->setUserId(NULL);
        } else {
            $this->setUserId($v->getId());
        }

        $this->aUser = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the User object, it will not be re-added.
        if ($v !== null) {
            $v->addMedia($this);
        }


        return $this;
    }


    /**
     * Get the associated User object
     *
     * @param PropelPDO $con Optional Connection object.
     * @param $doQuery Executes a query to get the object if required
     * @return User The associated User object.
     * @throws PropelException
     */
    public function getUser(PropelPDO $con = null, $doQuery = true)
    {
        if ($this->aUser === null && (($this->user_id !== "" && $this->user_id !== null)) && $doQuery) {
            $this->aUser = UserQuery::create()->findPk($this->user_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aUser->addMedias($this);
             */
        }

        return $this->aUser;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('Audio' == $relationName) {
            $this->initAudios();
        }
        if ('Book' == $relationName) {
            $this->initBooks();
        }
        if ('Video' == $relationName) {
            $this->initVideos();
        }
        if ('Game' == $relationName) {
            $this->initGames();
        }
        if ('Comment' == $relationName) {
            $this->initComments();
        }
        if ('MediaToArtist' == $relationName) {
            $this->initMediaToArtists();
        }
        if ('MediaToGenre' == $relationName) {
            $this->initMediaToGenres();
        }
        if ('MediaToLanguage' == $relationName) {
            $this->initMediaToLanguages();
        }
    }

    /**
     * Clears out the collAudios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addAudios()
     */
    public function clearAudios()
    {
        $this->collAudios = null; // important to set this to null since that means it is uninitialized
        $this->collAudiosPartial = null;

        return $this;
    }

    /**
     * reset is the collAudios collection loaded partially
     *
     * @return void
     */
    public function resetPartialAudios($v = true)
    {
        $this->collAudiosPartial = $v;
    }

    /**
     * Initializes the collAudios collection.
     *
     * By default this just sets the collAudios collection to an empty array (like clearcollAudios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initAudios($overrideExisting = true)
    {
        if (null !== $this->collAudios && !$overrideExisting) {
            return;
        }
        $this->collAudios = new PropelObjectCollection();
        $this->collAudios->setModel('Audio');
    }

    /**
     * Gets an array of Audio objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Audio[] List of Audio objects
     * @throws PropelException
     */
    public function getAudios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collAudiosPartial && !$this->isNew();
        if (null === $this->collAudios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collAudios) {
                // return empty collection
                $this->initAudios();
            } else {
                $collAudios = AudioQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collAudiosPartial && count($collAudios)) {
                      $this->initAudios(false);

                      foreach ($collAudios as $obj) {
                        if (false == $this->collAudios->contains($obj)) {
                          $this->collAudios->append($obj);
                        }
                      }

                      $this->collAudiosPartial = true;
                    }

                    $collAudios->getInternalIterator()->rewind();

                    return $collAudios;
                }

                if ($partial && $this->collAudios) {
                    foreach ($this->collAudios as $obj) {
                        if ($obj->isNew()) {
                            $collAudios[] = $obj;
                        }
                    }
                }

                $this->collAudios = $collAudios;
                $this->collAudiosPartial = false;
            }
        }

        return $this->collAudios;
    }

    /**
     * Sets a collection of Audio objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $audios A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setAudios(PropelCollection $audios, PropelPDO $con = null)
    {
        $audiosToDelete = $this->getAudios(new Criteria(), $con)->diff($audios);


        $this->audiosScheduledForDeletion = $audiosToDelete;

        foreach ($audiosToDelete as $audioRemoved) {
            $audioRemoved->setMedia(null);
        }

        $this->collAudios = null;
        foreach ($audios as $audio) {
            $this->addAudio($audio);
        }

        $this->collAudios = $audios;
        $this->collAudiosPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Audio objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Audio objects.
     * @throws PropelException
     */
    public function countAudios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collAudiosPartial && !$this->isNew();
        if (null === $this->collAudios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collAudios) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getAudios());
            }
            $query = AudioQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collAudios);
    }

    /**
     * Method called to associate a Audio object to this object
     * through the Audio foreign key attribute.
     *
     * @param    Audio $l Audio
     * @return Media The current object (for fluent API support)
     */
    public function addAudio(Audio $l)
    {
        if ($this->collAudios === null) {
            $this->initAudios();
            $this->collAudiosPartial = true;
        }

        if (!in_array($l, $this->collAudios->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddAudio($l);

            if ($this->audiosScheduledForDeletion and $this->audiosScheduledForDeletion->contains($l)) {
                $this->audiosScheduledForDeletion->remove($this->audiosScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Audio $audio The audio object to add.
     */
    protected function doAddAudio($audio)
    {
        $this->collAudios[]= $audio;
        $audio->setMedia($this);
    }

    /**
     * @param	Audio $audio The audio object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeAudio($audio)
    {
        if ($this->getAudios()->contains($audio)) {
            $this->collAudios->remove($this->collAudios->search($audio));
            if (null === $this->audiosScheduledForDeletion) {
                $this->audiosScheduledForDeletion = clone $this->collAudios;
                $this->audiosScheduledForDeletion->clear();
            }
            $this->audiosScheduledForDeletion[]= clone $audio;
            $audio->setMedia(null);
        }

        return $this;
    }

    /**
     * Clears out the collBooks collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addBooks()
     */
    public function clearBooks()
    {
        $this->collBooks = null; // important to set this to null since that means it is uninitialized
        $this->collBooksPartial = null;

        return $this;
    }

    /**
     * reset is the collBooks collection loaded partially
     *
     * @return void
     */
    public function resetPartialBooks($v = true)
    {
        $this->collBooksPartial = $v;
    }

    /**
     * Initializes the collBooks collection.
     *
     * By default this just sets the collBooks collection to an empty array (like clearcollBooks());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initBooks($overrideExisting = true)
    {
        if (null !== $this->collBooks && !$overrideExisting) {
            return;
        }
        $this->collBooks = new PropelObjectCollection();
        $this->collBooks->setModel('Book');
    }

    /**
     * Gets an array of Book objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Book[] List of Book objects
     * @throws PropelException
     */
    public function getBooks($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collBooksPartial && !$this->isNew();
        if (null === $this->collBooks || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collBooks) {
                // return empty collection
                $this->initBooks();
            } else {
                $collBooks = BookQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collBooksPartial && count($collBooks)) {
                      $this->initBooks(false);

                      foreach ($collBooks as $obj) {
                        if (false == $this->collBooks->contains($obj)) {
                          $this->collBooks->append($obj);
                        }
                      }

                      $this->collBooksPartial = true;
                    }

                    $collBooks->getInternalIterator()->rewind();

                    return $collBooks;
                }

                if ($partial && $this->collBooks) {
                    foreach ($this->collBooks as $obj) {
                        if ($obj->isNew()) {
                            $collBooks[] = $obj;
                        }
                    }
                }

                $this->collBooks = $collBooks;
                $this->collBooksPartial = false;
            }
        }

        return $this->collBooks;
    }

    /**
     * Sets a collection of Book objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $books A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setBooks(PropelCollection $books, PropelPDO $con = null)
    {
        $booksToDelete = $this->getBooks(new Criteria(), $con)->diff($books);


        $this->booksScheduledForDeletion = $booksToDelete;

        foreach ($booksToDelete as $bookRemoved) {
            $bookRemoved->setMedia(null);
        }

        $this->collBooks = null;
        foreach ($books as $book) {
            $this->addBook($book);
        }

        $this->collBooks = $books;
        $this->collBooksPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Book objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Book objects.
     * @throws PropelException
     */
    public function countBooks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collBooksPartial && !$this->isNew();
        if (null === $this->collBooks || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collBooks) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getBooks());
            }
            $query = BookQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collBooks);
    }

    /**
     * Method called to associate a Book object to this object
     * through the Book foreign key attribute.
     *
     * @param    Book $l Book
     * @return Media The current object (for fluent API support)
     */
    public function addBook(Book $l)
    {
        if ($this->collBooks === null) {
            $this->initBooks();
            $this->collBooksPartial = true;
        }

        if (!in_array($l, $this->collBooks->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddBook($l);

            if ($this->booksScheduledForDeletion and $this->booksScheduledForDeletion->contains($l)) {
                $this->booksScheduledForDeletion->remove($this->booksScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Book $book The book object to add.
     */
    protected function doAddBook($book)
    {
        $this->collBooks[]= $book;
        $book->setMedia($this);
    }

    /**
     * @param	Book $book The book object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeBook($book)
    {
        if ($this->getBooks()->contains($book)) {
            $this->collBooks->remove($this->collBooks->search($book));
            if (null === $this->booksScheduledForDeletion) {
                $this->booksScheduledForDeletion = clone $this->collBooks;
                $this->booksScheduledForDeletion->clear();
            }
            $this->booksScheduledForDeletion[]= clone $book;
            $book->setMedia(null);
        }

        return $this;
    }

    /**
     * Clears out the collVideos collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addVideos()
     */
    public function clearVideos()
    {
        $this->collVideos = null; // important to set this to null since that means it is uninitialized
        $this->collVideosPartial = null;

        return $this;
    }

    /**
     * reset is the collVideos collection loaded partially
     *
     * @return void
     */
    public function resetPartialVideos($v = true)
    {
        $this->collVideosPartial = $v;
    }

    /**
     * Initializes the collVideos collection.
     *
     * By default this just sets the collVideos collection to an empty array (like clearcollVideos());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initVideos($overrideExisting = true)
    {
        if (null !== $this->collVideos && !$overrideExisting) {
            return;
        }
        $this->collVideos = new PropelObjectCollection();
        $this->collVideos->setModel('Video');
    }

    /**
     * Gets an array of Video objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Video[] List of Video objects
     * @throws PropelException
     */
    public function getVideos($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collVideosPartial && !$this->isNew();
        if (null === $this->collVideos || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collVideos) {
                // return empty collection
                $this->initVideos();
            } else {
                $collVideos = VideoQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collVideosPartial && count($collVideos)) {
                      $this->initVideos(false);

                      foreach ($collVideos as $obj) {
                        if (false == $this->collVideos->contains($obj)) {
                          $this->collVideos->append($obj);
                        }
                      }

                      $this->collVideosPartial = true;
                    }

                    $collVideos->getInternalIterator()->rewind();

                    return $collVideos;
                }

                if ($partial && $this->collVideos) {
                    foreach ($this->collVideos as $obj) {
                        if ($obj->isNew()) {
                            $collVideos[] = $obj;
                        }
                    }
                }

                $this->collVideos = $collVideos;
                $this->collVideosPartial = false;
            }
        }

        return $this->collVideos;
    }

    /**
     * Sets a collection of Video objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $videos A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setVideos(PropelCollection $videos, PropelPDO $con = null)
    {
        $videosToDelete = $this->getVideos(new Criteria(), $con)->diff($videos);


        $this->videosScheduledForDeletion = $videosToDelete;

        foreach ($videosToDelete as $videoRemoved) {
            $videoRemoved->setMedia(null);
        }

        $this->collVideos = null;
        foreach ($videos as $video) {
            $this->addVideo($video);
        }

        $this->collVideos = $videos;
        $this->collVideosPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Video objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Video objects.
     * @throws PropelException
     */
    public function countVideos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collVideosPartial && !$this->isNew();
        if (null === $this->collVideos || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collVideos) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getVideos());
            }
            $query = VideoQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collVideos);
    }

    /**
     * Method called to associate a Video object to this object
     * through the Video foreign key attribute.
     *
     * @param    Video $l Video
     * @return Media The current object (for fluent API support)
     */
    public function addVideo(Video $l)
    {
        if ($this->collVideos === null) {
            $this->initVideos();
            $this->collVideosPartial = true;
        }

        if (!in_array($l, $this->collVideos->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddVideo($l);

            if ($this->videosScheduledForDeletion and $this->videosScheduledForDeletion->contains($l)) {
                $this->videosScheduledForDeletion->remove($this->videosScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Video $video The video object to add.
     */
    protected function doAddVideo($video)
    {
        $this->collVideos[]= $video;
        $video->setMedia($this);
    }

    /**
     * @param	Video $video The video object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeVideo($video)
    {
        if ($this->getVideos()->contains($video)) {
            $this->collVideos->remove($this->collVideos->search($video));
            if (null === $this->videosScheduledForDeletion) {
                $this->videosScheduledForDeletion = clone $this->collVideos;
                $this->videosScheduledForDeletion->clear();
            }
            $this->videosScheduledForDeletion[]= clone $video;
            $video->setMedia(null);
        }

        return $this;
    }

    /**
     * Clears out the collGames collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addGames()
     */
    public function clearGames()
    {
        $this->collGames = null; // important to set this to null since that means it is uninitialized
        $this->collGamesPartial = null;

        return $this;
    }

    /**
     * reset is the collGames collection loaded partially
     *
     * @return void
     */
    public function resetPartialGames($v = true)
    {
        $this->collGamesPartial = $v;
    }

    /**
     * Initializes the collGames collection.
     *
     * By default this just sets the collGames collection to an empty array (like clearcollGames());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initGames($overrideExisting = true)
    {
        if (null !== $this->collGames && !$overrideExisting) {
            return;
        }
        $this->collGames = new PropelObjectCollection();
        $this->collGames->setModel('Game');
    }

    /**
     * Gets an array of Game objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Game[] List of Game objects
     * @throws PropelException
     */
    public function getGames($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collGamesPartial && !$this->isNew();
        if (null === $this->collGames || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collGames) {
                // return empty collection
                $this->initGames();
            } else {
                $collGames = GameQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collGamesPartial && count($collGames)) {
                      $this->initGames(false);

                      foreach ($collGames as $obj) {
                        if (false == $this->collGames->contains($obj)) {
                          $this->collGames->append($obj);
                        }
                      }

                      $this->collGamesPartial = true;
                    }

                    $collGames->getInternalIterator()->rewind();

                    return $collGames;
                }

                if ($partial && $this->collGames) {
                    foreach ($this->collGames as $obj) {
                        if ($obj->isNew()) {
                            $collGames[] = $obj;
                        }
                    }
                }

                $this->collGames = $collGames;
                $this->collGamesPartial = false;
            }
        }

        return $this->collGames;
    }

    /**
     * Sets a collection of Game objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $games A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setGames(PropelCollection $games, PropelPDO $con = null)
    {
        $gamesToDelete = $this->getGames(new Criteria(), $con)->diff($games);


        $this->gamesScheduledForDeletion = $gamesToDelete;

        foreach ($gamesToDelete as $gameRemoved) {
            $gameRemoved->setMedia(null);
        }

        $this->collGames = null;
        foreach ($games as $game) {
            $this->addGame($game);
        }

        $this->collGames = $games;
        $this->collGamesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Game objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Game objects.
     * @throws PropelException
     */
    public function countGames(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collGamesPartial && !$this->isNew();
        if (null === $this->collGames || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collGames) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getGames());
            }
            $query = GameQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collGames);
    }

    /**
     * Method called to associate a Game object to this object
     * through the Game foreign key attribute.
     *
     * @param    Game $l Game
     * @return Media The current object (for fluent API support)
     */
    public function addGame(Game $l)
    {
        if ($this->collGames === null) {
            $this->initGames();
            $this->collGamesPartial = true;
        }

        if (!in_array($l, $this->collGames->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddGame($l);

            if ($this->gamesScheduledForDeletion and $this->gamesScheduledForDeletion->contains($l)) {
                $this->gamesScheduledForDeletion->remove($this->gamesScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Game $game The game object to add.
     */
    protected function doAddGame($game)
    {
        $this->collGames[]= $game;
        $game->setMedia($this);
    }

    /**
     * @param	Game $game The game object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeGame($game)
    {
        if ($this->getGames()->contains($game)) {
            $this->collGames->remove($this->collGames->search($game));
            if (null === $this->gamesScheduledForDeletion) {
                $this->gamesScheduledForDeletion = clone $this->collGames;
                $this->gamesScheduledForDeletion->clear();
            }
            $this->gamesScheduledForDeletion[]= clone $game;
            $game->setMedia(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Media is new, it will return
     * an empty collection; or if this Media has previously
     * been saved, it will retrieve related Games from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Media.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Game[] List of Game objects
     */
    public function getGamesJoinPlatform($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = GameQuery::create(null, $criteria);
        $query->joinWith('Platform', $join_behavior);

        return $this->getGames($query, $con);
    }

    /**
     * Clears out the collComments collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addComments()
     */
    public function clearComments()
    {
        $this->collComments = null; // important to set this to null since that means it is uninitialized
        $this->collCommentsPartial = null;

        return $this;
    }

    /**
     * reset is the collComments collection loaded partially
     *
     * @return void
     */
    public function resetPartialComments($v = true)
    {
        $this->collCommentsPartial = $v;
    }

    /**
     * Initializes the collComments collection.
     *
     * By default this just sets the collComments collection to an empty array (like clearcollComments());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initComments($overrideExisting = true)
    {
        if (null !== $this->collComments && !$overrideExisting) {
            return;
        }
        $this->collComments = new PropelObjectCollection();
        $this->collComments->setModel('Comment');
    }

    /**
     * Gets an array of Comment objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Comment[] List of Comment objects
     * @throws PropelException
     */
    public function getComments($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommentsPartial && !$this->isNew();
        if (null === $this->collComments || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collComments) {
                // return empty collection
                $this->initComments();
            } else {
                $collComments = CommentQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommentsPartial && count($collComments)) {
                      $this->initComments(false);

                      foreach ($collComments as $obj) {
                        if (false == $this->collComments->contains($obj)) {
                          $this->collComments->append($obj);
                        }
                      }

                      $this->collCommentsPartial = true;
                    }

                    $collComments->getInternalIterator()->rewind();

                    return $collComments;
                }

                if ($partial && $this->collComments) {
                    foreach ($this->collComments as $obj) {
                        if ($obj->isNew()) {
                            $collComments[] = $obj;
                        }
                    }
                }

                $this->collComments = $collComments;
                $this->collCommentsPartial = false;
            }
        }

        return $this->collComments;
    }

    /**
     * Sets a collection of Comment objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $comments A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setComments(PropelCollection $comments, PropelPDO $con = null)
    {
        $commentsToDelete = $this->getComments(new Criteria(), $con)->diff($comments);


        $this->commentsScheduledForDeletion = $commentsToDelete;

        foreach ($commentsToDelete as $commentRemoved) {
            $commentRemoved->setMedia(null);
        }

        $this->collComments = null;
        foreach ($comments as $comment) {
            $this->addComment($comment);
        }

        $this->collComments = $comments;
        $this->collCommentsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related Comment objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Comment objects.
     * @throws PropelException
     */
    public function countComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommentsPartial && !$this->isNew();
        if (null === $this->collComments || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collComments) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getComments());
            }
            $query = CommentQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collComments);
    }

    /**
     * Method called to associate a Comment object to this object
     * through the Comment foreign key attribute.
     *
     * @param    Comment $l Comment
     * @return Media The current object (for fluent API support)
     */
    public function addComment(Comment $l)
    {
        if ($this->collComments === null) {
            $this->initComments();
            $this->collCommentsPartial = true;
        }

        if (!in_array($l, $this->collComments->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddComment($l);

            if ($this->commentsScheduledForDeletion and $this->commentsScheduledForDeletion->contains($l)) {
                $this->commentsScheduledForDeletion->remove($this->commentsScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	Comment $comment The comment object to add.
     */
    protected function doAddComment($comment)
    {
        $this->collComments[]= $comment;
        $comment->setMedia($this);
    }

    /**
     * @param	Comment $comment The comment object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeComment($comment)
    {
        if ($this->getComments()->contains($comment)) {
            $this->collComments->remove($this->collComments->search($comment));
            if (null === $this->commentsScheduledForDeletion) {
                $this->commentsScheduledForDeletion = clone $this->collComments;
                $this->commentsScheduledForDeletion->clear();
            }
            $this->commentsScheduledForDeletion[]= clone $comment;
            $comment->setMedia(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Media is new, it will return
     * an empty collection; or if this Media has previously
     * been saved, it will retrieve related Comments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Media.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Comment[] List of Comment objects
     */
    public function getCommentsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = CommentQuery::create(null, $criteria);
        $query->joinWith('User', $join_behavior);

        return $this->getComments($query, $con);
    }

    /**
     * Clears out the collMediaToArtists collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addMediaToArtists()
     */
    public function clearMediaToArtists()
    {
        $this->collMediaToArtists = null; // important to set this to null since that means it is uninitialized
        $this->collMediaToArtistsPartial = null;

        return $this;
    }

    /**
     * reset is the collMediaToArtists collection loaded partially
     *
     * @return void
     */
    public function resetPartialMediaToArtists($v = true)
    {
        $this->collMediaToArtistsPartial = $v;
    }

    /**
     * Initializes the collMediaToArtists collection.
     *
     * By default this just sets the collMediaToArtists collection to an empty array (like clearcollMediaToArtists());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMediaToArtists($overrideExisting = true)
    {
        if (null !== $this->collMediaToArtists && !$overrideExisting) {
            return;
        }
        $this->collMediaToArtists = new PropelObjectCollection();
        $this->collMediaToArtists->setModel('MediaToArtist');
    }

    /**
     * Gets an array of MediaToArtist objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|MediaToArtist[] List of MediaToArtist objects
     * @throws PropelException
     */
    public function getMediaToArtists($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMediaToArtistsPartial && !$this->isNew();
        if (null === $this->collMediaToArtists || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMediaToArtists) {
                // return empty collection
                $this->initMediaToArtists();
            } else {
                $collMediaToArtists = MediaToArtistQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMediaToArtistsPartial && count($collMediaToArtists)) {
                      $this->initMediaToArtists(false);

                      foreach ($collMediaToArtists as $obj) {
                        if (false == $this->collMediaToArtists->contains($obj)) {
                          $this->collMediaToArtists->append($obj);
                        }
                      }

                      $this->collMediaToArtistsPartial = true;
                    }

                    $collMediaToArtists->getInternalIterator()->rewind();

                    return $collMediaToArtists;
                }

                if ($partial && $this->collMediaToArtists) {
                    foreach ($this->collMediaToArtists as $obj) {
                        if ($obj->isNew()) {
                            $collMediaToArtists[] = $obj;
                        }
                    }
                }

                $this->collMediaToArtists = $collMediaToArtists;
                $this->collMediaToArtistsPartial = false;
            }
        }

        return $this->collMediaToArtists;
    }

    /**
     * Sets a collection of MediaToArtist objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mediaToArtists A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setMediaToArtists(PropelCollection $mediaToArtists, PropelPDO $con = null)
    {
        $mediaToArtistsToDelete = $this->getMediaToArtists(new Criteria(), $con)->diff($mediaToArtists);


        $this->mediaToArtistsScheduledForDeletion = $mediaToArtistsToDelete;

        foreach ($mediaToArtistsToDelete as $mediaToArtistRemoved) {
            $mediaToArtistRemoved->setMedia(null);
        }

        $this->collMediaToArtists = null;
        foreach ($mediaToArtists as $mediaToArtist) {
            $this->addMediaToArtist($mediaToArtist);
        }

        $this->collMediaToArtists = $mediaToArtists;
        $this->collMediaToArtistsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related MediaToArtist objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related MediaToArtist objects.
     * @throws PropelException
     */
    public function countMediaToArtists(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMediaToArtistsPartial && !$this->isNew();
        if (null === $this->collMediaToArtists || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMediaToArtists) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getMediaToArtists());
            }
            $query = MediaToArtistQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collMediaToArtists);
    }

    /**
     * Method called to associate a MediaToArtist object to this object
     * through the MediaToArtist foreign key attribute.
     *
     * @param    MediaToArtist $l MediaToArtist
     * @return Media The current object (for fluent API support)
     */
    public function addMediaToArtist(MediaToArtist $l)
    {
        if ($this->collMediaToArtists === null) {
            $this->initMediaToArtists();
            $this->collMediaToArtistsPartial = true;
        }

        if (!in_array($l, $this->collMediaToArtists->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddMediaToArtist($l);

            if ($this->mediaToArtistsScheduledForDeletion and $this->mediaToArtistsScheduledForDeletion->contains($l)) {
                $this->mediaToArtistsScheduledForDeletion->remove($this->mediaToArtistsScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	MediaToArtist $mediaToArtist The mediaToArtist object to add.
     */
    protected function doAddMediaToArtist($mediaToArtist)
    {
        $this->collMediaToArtists[]= $mediaToArtist;
        $mediaToArtist->setMedia($this);
    }

    /**
     * @param	MediaToArtist $mediaToArtist The mediaToArtist object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeMediaToArtist($mediaToArtist)
    {
        if ($this->getMediaToArtists()->contains($mediaToArtist)) {
            $this->collMediaToArtists->remove($this->collMediaToArtists->search($mediaToArtist));
            if (null === $this->mediaToArtistsScheduledForDeletion) {
                $this->mediaToArtistsScheduledForDeletion = clone $this->collMediaToArtists;
                $this->mediaToArtistsScheduledForDeletion->clear();
            }
            $this->mediaToArtistsScheduledForDeletion[]= clone $mediaToArtist;
            $mediaToArtist->setMedia(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Media is new, it will return
     * an empty collection; or if this Media has previously
     * been saved, it will retrieve related MediaToArtists from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Media.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|MediaToArtist[] List of MediaToArtist objects
     */
    public function getMediaToArtistsJoinArtist($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = MediaToArtistQuery::create(null, $criteria);
        $query->joinWith('Artist', $join_behavior);

        return $this->getMediaToArtists($query, $con);
    }

    /**
     * Clears out the collMediaToGenres collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addMediaToGenres()
     */
    public function clearMediaToGenres()
    {
        $this->collMediaToGenres = null; // important to set this to null since that means it is uninitialized
        $this->collMediaToGenresPartial = null;

        return $this;
    }

    /**
     * reset is the collMediaToGenres collection loaded partially
     *
     * @return void
     */
    public function resetPartialMediaToGenres($v = true)
    {
        $this->collMediaToGenresPartial = $v;
    }

    /**
     * Initializes the collMediaToGenres collection.
     *
     * By default this just sets the collMediaToGenres collection to an empty array (like clearcollMediaToGenres());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMediaToGenres($overrideExisting = true)
    {
        if (null !== $this->collMediaToGenres && !$overrideExisting) {
            return;
        }
        $this->collMediaToGenres = new PropelObjectCollection();
        $this->collMediaToGenres->setModel('MediaToGenre');
    }

    /**
     * Gets an array of MediaToGenre objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|MediaToGenre[] List of MediaToGenre objects
     * @throws PropelException
     */
    public function getMediaToGenres($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMediaToGenresPartial && !$this->isNew();
        if (null === $this->collMediaToGenres || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMediaToGenres) {
                // return empty collection
                $this->initMediaToGenres();
            } else {
                $collMediaToGenres = MediaToGenreQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMediaToGenresPartial && count($collMediaToGenres)) {
                      $this->initMediaToGenres(false);

                      foreach ($collMediaToGenres as $obj) {
                        if (false == $this->collMediaToGenres->contains($obj)) {
                          $this->collMediaToGenres->append($obj);
                        }
                      }

                      $this->collMediaToGenresPartial = true;
                    }

                    $collMediaToGenres->getInternalIterator()->rewind();

                    return $collMediaToGenres;
                }

                if ($partial && $this->collMediaToGenres) {
                    foreach ($this->collMediaToGenres as $obj) {
                        if ($obj->isNew()) {
                            $collMediaToGenres[] = $obj;
                        }
                    }
                }

                $this->collMediaToGenres = $collMediaToGenres;
                $this->collMediaToGenresPartial = false;
            }
        }

        return $this->collMediaToGenres;
    }

    /**
     * Sets a collection of MediaToGenre objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mediaToGenres A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setMediaToGenres(PropelCollection $mediaToGenres, PropelPDO $con = null)
    {
        $mediaToGenresToDelete = $this->getMediaToGenres(new Criteria(), $con)->diff($mediaToGenres);


        $this->mediaToGenresScheduledForDeletion = $mediaToGenresToDelete;

        foreach ($mediaToGenresToDelete as $mediaToGenreRemoved) {
            $mediaToGenreRemoved->setMedia(null);
        }

        $this->collMediaToGenres = null;
        foreach ($mediaToGenres as $mediaToGenre) {
            $this->addMediaToGenre($mediaToGenre);
        }

        $this->collMediaToGenres = $mediaToGenres;
        $this->collMediaToGenresPartial = false;

        return $this;
    }

    /**
     * Returns the number of related MediaToGenre objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related MediaToGenre objects.
     * @throws PropelException
     */
    public function countMediaToGenres(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMediaToGenresPartial && !$this->isNew();
        if (null === $this->collMediaToGenres || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMediaToGenres) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getMediaToGenres());
            }
            $query = MediaToGenreQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collMediaToGenres);
    }

    /**
     * Method called to associate a MediaToGenre object to this object
     * through the MediaToGenre foreign key attribute.
     *
     * @param    MediaToGenre $l MediaToGenre
     * @return Media The current object (for fluent API support)
     */
    public function addMediaToGenre(MediaToGenre $l)
    {
        if ($this->collMediaToGenres === null) {
            $this->initMediaToGenres();
            $this->collMediaToGenresPartial = true;
        }

        if (!in_array($l, $this->collMediaToGenres->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddMediaToGenre($l);

            if ($this->mediaToGenresScheduledForDeletion and $this->mediaToGenresScheduledForDeletion->contains($l)) {
                $this->mediaToGenresScheduledForDeletion->remove($this->mediaToGenresScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	MediaToGenre $mediaToGenre The mediaToGenre object to add.
     */
    protected function doAddMediaToGenre($mediaToGenre)
    {
        $this->collMediaToGenres[]= $mediaToGenre;
        $mediaToGenre->setMedia($this);
    }

    /**
     * @param	MediaToGenre $mediaToGenre The mediaToGenre object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeMediaToGenre($mediaToGenre)
    {
        if ($this->getMediaToGenres()->contains($mediaToGenre)) {
            $this->collMediaToGenres->remove($this->collMediaToGenres->search($mediaToGenre));
            if (null === $this->mediaToGenresScheduledForDeletion) {
                $this->mediaToGenresScheduledForDeletion = clone $this->collMediaToGenres;
                $this->mediaToGenresScheduledForDeletion->clear();
            }
            $this->mediaToGenresScheduledForDeletion[]= clone $mediaToGenre;
            $mediaToGenre->setMedia(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Media is new, it will return
     * an empty collection; or if this Media has previously
     * been saved, it will retrieve related MediaToGenres from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Media.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|MediaToGenre[] List of MediaToGenre objects
     */
    public function getMediaToGenresJoinGenre($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = MediaToGenreQuery::create(null, $criteria);
        $query->joinWith('Genre', $join_behavior);

        return $this->getMediaToGenres($query, $con);
    }

    /**
     * Clears out the collMediaToLanguages collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return Media The current object (for fluent API support)
     * @see        addMediaToLanguages()
     */
    public function clearMediaToLanguages()
    {
        $this->collMediaToLanguages = null; // important to set this to null since that means it is uninitialized
        $this->collMediaToLanguagesPartial = null;

        return $this;
    }

    /**
     * reset is the collMediaToLanguages collection loaded partially
     *
     * @return void
     */
    public function resetPartialMediaToLanguages($v = true)
    {
        $this->collMediaToLanguagesPartial = $v;
    }

    /**
     * Initializes the collMediaToLanguages collection.
     *
     * By default this just sets the collMediaToLanguages collection to an empty array (like clearcollMediaToLanguages());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initMediaToLanguages($overrideExisting = true)
    {
        if (null !== $this->collMediaToLanguages && !$overrideExisting) {
            return;
        }
        $this->collMediaToLanguages = new PropelObjectCollection();
        $this->collMediaToLanguages->setModel('MediaToLanguage');
    }

    /**
     * Gets an array of MediaToLanguage objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Media is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|MediaToLanguage[] List of MediaToLanguage objects
     * @throws PropelException
     */
    public function getMediaToLanguages($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collMediaToLanguagesPartial && !$this->isNew();
        if (null === $this->collMediaToLanguages || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collMediaToLanguages) {
                // return empty collection
                $this->initMediaToLanguages();
            } else {
                $collMediaToLanguages = MediaToLanguageQuery::create(null, $criteria)
                    ->filterByMedia($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collMediaToLanguagesPartial && count($collMediaToLanguages)) {
                      $this->initMediaToLanguages(false);

                      foreach ($collMediaToLanguages as $obj) {
                        if (false == $this->collMediaToLanguages->contains($obj)) {
                          $this->collMediaToLanguages->append($obj);
                        }
                      }

                      $this->collMediaToLanguagesPartial = true;
                    }

                    $collMediaToLanguages->getInternalIterator()->rewind();

                    return $collMediaToLanguages;
                }

                if ($partial && $this->collMediaToLanguages) {
                    foreach ($this->collMediaToLanguages as $obj) {
                        if ($obj->isNew()) {
                            $collMediaToLanguages[] = $obj;
                        }
                    }
                }

                $this->collMediaToLanguages = $collMediaToLanguages;
                $this->collMediaToLanguagesPartial = false;
            }
        }

        return $this->collMediaToLanguages;
    }

    /**
     * Sets a collection of MediaToLanguage objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $mediaToLanguages A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return Media The current object (for fluent API support)
     */
    public function setMediaToLanguages(PropelCollection $mediaToLanguages, PropelPDO $con = null)
    {
        $mediaToLanguagesToDelete = $this->getMediaToLanguages(new Criteria(), $con)->diff($mediaToLanguages);


        $this->mediaToLanguagesScheduledForDeletion = $mediaToLanguagesToDelete;

        foreach ($mediaToLanguagesToDelete as $mediaToLanguageRemoved) {
            $mediaToLanguageRemoved->setMedia(null);
        }

        $this->collMediaToLanguages = null;
        foreach ($mediaToLanguages as $mediaToLanguage) {
            $this->addMediaToLanguage($mediaToLanguage);
        }

        $this->collMediaToLanguages = $mediaToLanguages;
        $this->collMediaToLanguagesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related MediaToLanguage objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related MediaToLanguage objects.
     * @throws PropelException
     */
    public function countMediaToLanguages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collMediaToLanguagesPartial && !$this->isNew();
        if (null === $this->collMediaToLanguages || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collMediaToLanguages) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getMediaToLanguages());
            }
            $query = MediaToLanguageQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByMedia($this)
                ->count($con);
        }

        return count($this->collMediaToLanguages);
    }

    /**
     * Method called to associate a MediaToLanguage object to this object
     * through the MediaToLanguage foreign key attribute.
     *
     * @param    MediaToLanguage $l MediaToLanguage
     * @return Media The current object (for fluent API support)
     */
    public function addMediaToLanguage(MediaToLanguage $l)
    {
        if ($this->collMediaToLanguages === null) {
            $this->initMediaToLanguages();
            $this->collMediaToLanguagesPartial = true;
        }

        if (!in_array($l, $this->collMediaToLanguages->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddMediaToLanguage($l);

            if ($this->mediaToLanguagesScheduledForDeletion and $this->mediaToLanguagesScheduledForDeletion->contains($l)) {
                $this->mediaToLanguagesScheduledForDeletion->remove($this->mediaToLanguagesScheduledForDeletion->search($l));
            }
        }

        return $this;
    }

    /**
     * @param	MediaToLanguage $mediaToLanguage The mediaToLanguage object to add.
     */
    protected function doAddMediaToLanguage($mediaToLanguage)
    {
        $this->collMediaToLanguages[]= $mediaToLanguage;
        $mediaToLanguage->setMedia($this);
    }

    /**
     * @param	MediaToLanguage $mediaToLanguage The mediaToLanguage object to remove.
     * @return Media The current object (for fluent API support)
     */
    public function removeMediaToLanguage($mediaToLanguage)
    {
        if ($this->getMediaToLanguages()->contains($mediaToLanguage)) {
            $this->collMediaToLanguages->remove($this->collMediaToLanguages->search($mediaToLanguage));
            if (null === $this->mediaToLanguagesScheduledForDeletion) {
                $this->mediaToLanguagesScheduledForDeletion = clone $this->collMediaToLanguages;
                $this->mediaToLanguagesScheduledForDeletion->clear();
            }
            $this->mediaToLanguagesScheduledForDeletion[]= clone $mediaToLanguage;
            $mediaToLanguage->setMedia(null);
        }

        return $this;
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Media is new, it will return
     * an empty collection; or if this Media has previously
     * been saved, it will retrieve related MediaToLanguages from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Media.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|MediaToLanguage[] List of MediaToLanguage objects
     */
    public function getMediaToLanguagesJoinLanguage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = MediaToLanguageQuery::create(null, $criteria);
        $query->joinWith('Language', $join_behavior);

        return $this->getMediaToLanguages($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->distributor_id = null;
        $this->edition_id = null;
        $this->type_id = null;
        $this->user_id = null;
        $this->age_limit = null;
        $this->create_date = null;
        $this->release_date = null;
        $this->name = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->alreadyInClearAllReferencesDeep = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volume/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep && !$this->alreadyInClearAllReferencesDeep) {
            $this->alreadyInClearAllReferencesDeep = true;
            if ($this->collAudios) {
                foreach ($this->collAudios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collBooks) {
                foreach ($this->collBooks as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collVideos) {
                foreach ($this->collVideos as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collGames) {
                foreach ($this->collGames as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collComments) {
                foreach ($this->collComments as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMediaToArtists) {
                foreach ($this->collMediaToArtists as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMediaToGenres) {
                foreach ($this->collMediaToGenres as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collMediaToLanguages) {
                foreach ($this->collMediaToLanguages as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->aDistributor instanceof Persistent) {
              $this->aDistributor->clearAllReferences($deep);
            }
            if ($this->aEdition instanceof Persistent) {
              $this->aEdition->clearAllReferences($deep);
            }
            if ($this->aType instanceof Persistent) {
              $this->aType->clearAllReferences($deep);
            }
            if ($this->aUser instanceof Persistent) {
              $this->aUser->clearAllReferences($deep);
            }

            $this->alreadyInClearAllReferencesDeep = false;
        } // if ($deep)

        if ($this->collAudios instanceof PropelCollection) {
            $this->collAudios->clearIterator();
        }
        $this->collAudios = null;
        if ($this->collBooks instanceof PropelCollection) {
            $this->collBooks->clearIterator();
        }
        $this->collBooks = null;
        if ($this->collVideos instanceof PropelCollection) {
            $this->collVideos->clearIterator();
        }
        $this->collVideos = null;
        if ($this->collGames instanceof PropelCollection) {
            $this->collGames->clearIterator();
        }
        $this->collGames = null;
        if ($this->collComments instanceof PropelCollection) {
            $this->collComments->clearIterator();
        }
        $this->collComments = null;
        if ($this->collMediaToArtists instanceof PropelCollection) {
            $this->collMediaToArtists->clearIterator();
        }
        $this->collMediaToArtists = null;
        if ($this->collMediaToGenres instanceof PropelCollection) {
            $this->collMediaToGenres->clearIterator();
        }
        $this->collMediaToGenres = null;
        if ($this->collMediaToLanguages instanceof PropelCollection) {
            $this->collMediaToLanguages->clearIterator();
        }
        $this->collMediaToLanguages = null;
        $this->aDistributor = null;
        $this->aEdition = null;
        $this->aType = null;
        $this->aUser = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(MediaPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

}

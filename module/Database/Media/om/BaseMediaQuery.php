<?php

namespace Database\Media\om;

use \Criteria;
use \Exception;
use \ModelCriteria;
use \ModelJoin;
use \PDO;
use \Propel;
use \PropelCollection;
use \PropelException;
use \PropelObjectCollection;
use \PropelPDO;
use Database\Media\Audio;
use Database\Media\Book;
use Database\Media\Comment;
use Database\Media\Distributor;
use Database\Media\Edition;
use Database\Media\Game;
use Database\Media\Media;
use Database\Media\MediaPeer;
use Database\Media\MediaQuery;
use Database\Media\MediaToArtist;
use Database\Media\MediaToGenre;
use Database\Media\MediaToLanguage;
use Database\Media\Type;
use Database\Media\Video;
use Database\User\User;

/**
 * Base class that represents a query for the 'net_bazzline_media_library_media_common' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.1 on:
 *
 * Fri Apr 18 14:57:25 2014
 *
 * @method MediaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method MediaQuery orderByDistributorId($order = Criteria::ASC) Order by the distributor_id column
 * @method MediaQuery orderByEditionId($order = Criteria::ASC) Order by the edition_id column
 * @method MediaQuery orderByTypeId($order = Criteria::ASC) Order by the type_id column
 * @method MediaQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method MediaQuery orderByAgeLimit($order = Criteria::ASC) Order by the age_limit column
 * @method MediaQuery orderByCreateDate($order = Criteria::ASC) Order by the create_date column
 * @method MediaQuery orderByReleaseDate($order = Criteria::ASC) Order by the release_date column
 * @method MediaQuery orderByName($order = Criteria::ASC) Order by the name column
 *
 * @method MediaQuery groupById() Group by the id column
 * @method MediaQuery groupByDistributorId() Group by the distributor_id column
 * @method MediaQuery groupByEditionId() Group by the edition_id column
 * @method MediaQuery groupByTypeId() Group by the type_id column
 * @method MediaQuery groupByUserId() Group by the user_id column
 * @method MediaQuery groupByAgeLimit() Group by the age_limit column
 * @method MediaQuery groupByCreateDate() Group by the create_date column
 * @method MediaQuery groupByReleaseDate() Group by the release_date column
 * @method MediaQuery groupByName() Group by the name column
 *
 * @method MediaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method MediaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method MediaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method MediaQuery leftJoinDistributor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Distributor relation
 * @method MediaQuery rightJoinDistributor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Distributor relation
 * @method MediaQuery innerJoinDistributor($relationAlias = null) Adds a INNER JOIN clause to the query using the Distributor relation
 *
 * @method MediaQuery leftJoinEdition($relationAlias = null) Adds a LEFT JOIN clause to the query using the Edition relation
 * @method MediaQuery rightJoinEdition($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Edition relation
 * @method MediaQuery innerJoinEdition($relationAlias = null) Adds a INNER JOIN clause to the query using the Edition relation
 *
 * @method MediaQuery leftJoinType($relationAlias = null) Adds a LEFT JOIN clause to the query using the Type relation
 * @method MediaQuery rightJoinType($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Type relation
 * @method MediaQuery innerJoinType($relationAlias = null) Adds a INNER JOIN clause to the query using the Type relation
 *
 * @method MediaQuery leftJoinUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the User relation
 * @method MediaQuery rightJoinUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the User relation
 * @method MediaQuery innerJoinUser($relationAlias = null) Adds a INNER JOIN clause to the query using the User relation
 *
 * @method MediaQuery leftJoinAudio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Audio relation
 * @method MediaQuery rightJoinAudio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Audio relation
 * @method MediaQuery innerJoinAudio($relationAlias = null) Adds a INNER JOIN clause to the query using the Audio relation
 *
 * @method MediaQuery leftJoinBook($relationAlias = null) Adds a LEFT JOIN clause to the query using the Book relation
 * @method MediaQuery rightJoinBook($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Book relation
 * @method MediaQuery innerJoinBook($relationAlias = null) Adds a INNER JOIN clause to the query using the Book relation
 *
 * @method MediaQuery leftJoinVideo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Video relation
 * @method MediaQuery rightJoinVideo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Video relation
 * @method MediaQuery innerJoinVideo($relationAlias = null) Adds a INNER JOIN clause to the query using the Video relation
 *
 * @method MediaQuery leftJoinGame($relationAlias = null) Adds a LEFT JOIN clause to the query using the Game relation
 * @method MediaQuery rightJoinGame($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Game relation
 * @method MediaQuery innerJoinGame($relationAlias = null) Adds a INNER JOIN clause to the query using the Game relation
 *
 * @method MediaQuery leftJoinComment($relationAlias = null) Adds a LEFT JOIN clause to the query using the Comment relation
 * @method MediaQuery rightJoinComment($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Comment relation
 * @method MediaQuery innerJoinComment($relationAlias = null) Adds a INNER JOIN clause to the query using the Comment relation
 *
 * @method MediaQuery leftJoinMediaToArtist($relationAlias = null) Adds a LEFT JOIN clause to the query using the MediaToArtist relation
 * @method MediaQuery rightJoinMediaToArtist($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MediaToArtist relation
 * @method MediaQuery innerJoinMediaToArtist($relationAlias = null) Adds a INNER JOIN clause to the query using the MediaToArtist relation
 *
 * @method MediaQuery leftJoinMediaToGenre($relationAlias = null) Adds a LEFT JOIN clause to the query using the MediaToGenre relation
 * @method MediaQuery rightJoinMediaToGenre($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MediaToGenre relation
 * @method MediaQuery innerJoinMediaToGenre($relationAlias = null) Adds a INNER JOIN clause to the query using the MediaToGenre relation
 *
 * @method MediaQuery leftJoinMediaToLanguage($relationAlias = null) Adds a LEFT JOIN clause to the query using the MediaToLanguage relation
 * @method MediaQuery rightJoinMediaToLanguage($relationAlias = null) Adds a RIGHT JOIN clause to the query using the MediaToLanguage relation
 * @method MediaQuery innerJoinMediaToLanguage($relationAlias = null) Adds a INNER JOIN clause to the query using the MediaToLanguage relation
 *
 * @method Media findOne(PropelPDO $con = null) Return the first Media matching the query
 * @method Media findOneOrCreate(PropelPDO $con = null) Return the first Media matching the query, or a new Media object populated from the query conditions when no match is found
 *
 * @method Media findOneByDistributorId(string $distributor_id) Return the first Media filtered by the distributor_id column
 * @method Media findOneByEditionId(string $edition_id) Return the first Media filtered by the edition_id column
 * @method Media findOneByTypeId(string $type_id) Return the first Media filtered by the type_id column
 * @method Media findOneByUserId(string $user_id) Return the first Media filtered by the user_id column
 * @method Media findOneByAgeLimit(int $age_limit) Return the first Media filtered by the age_limit column
 * @method Media findOneByCreateDate(string $create_date) Return the first Media filtered by the create_date column
 * @method Media findOneByReleaseDate(string $release_date) Return the first Media filtered by the release_date column
 * @method Media findOneByName(string $name) Return the first Media filtered by the name column
 *
 * @method array findById(string $id) Return Media objects filtered by the id column
 * @method array findByDistributorId(string $distributor_id) Return Media objects filtered by the distributor_id column
 * @method array findByEditionId(string $edition_id) Return Media objects filtered by the edition_id column
 * @method array findByTypeId(string $type_id) Return Media objects filtered by the type_id column
 * @method array findByUserId(string $user_id) Return Media objects filtered by the user_id column
 * @method array findByAgeLimit(int $age_limit) Return Media objects filtered by the age_limit column
 * @method array findByCreateDate(string $create_date) Return Media objects filtered by the create_date column
 * @method array findByReleaseDate(string $release_date) Return Media objects filtered by the release_date column
 * @method array findByName(string $name) Return Media objects filtered by the name column
 *
 * @package    propel.generator.Media.om
 */
abstract class BaseMediaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseMediaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = null, $modelName = null, $modelAlias = null)
    {
        if (null === $dbName) {
            $dbName = 'netBazzlineMediaLibrary';
        }
        if (null === $modelName) {
            $modelName = 'Database\\Media\\Media';
        }
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new MediaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   MediaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return MediaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof MediaQuery) {
            return $criteria;
        }
        $query = new MediaQuery(null, null, $modelAlias);

        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Media|Media[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = MediaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is already in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(MediaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Media A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Media A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT id, distributor_id, edition_id, type_id, user_id, age_limit, create_date, release_date, name FROM net_bazzline_media_library_media_common WHERE id = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_STR);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Media();
            $obj->hydrate($row);
            MediaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Media|Media[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Media[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(MediaPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(MediaPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById('fooValue');   // WHERE id = 'fooValue'
     * $query->filterById('%fooValue%'); // WHERE id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $id The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($id)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $id)) {
                $id = str_replace('*', '%', $id);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the distributor_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDistributorId('fooValue');   // WHERE distributor_id = 'fooValue'
     * $query->filterByDistributorId('%fooValue%'); // WHERE distributor_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $distributorId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByDistributorId($distributorId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($distributorId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $distributorId)) {
                $distributorId = str_replace('*', '%', $distributorId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::DISTRIBUTOR_ID, $distributorId, $comparison);
    }

    /**
     * Filter the query on the edition_id column
     *
     * Example usage:
     * <code>
     * $query->filterByEditionId('fooValue');   // WHERE edition_id = 'fooValue'
     * $query->filterByEditionId('%fooValue%'); // WHERE edition_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $editionId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByEditionId($editionId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($editionId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $editionId)) {
                $editionId = str_replace('*', '%', $editionId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::EDITION_ID, $editionId, $comparison);
    }

    /**
     * Filter the query on the type_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTypeId('fooValue');   // WHERE type_id = 'fooValue'
     * $query->filterByTypeId('%fooValue%'); // WHERE type_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $typeId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByTypeId($typeId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($typeId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $typeId)) {
                $typeId = str_replace('*', '%', $typeId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::TYPE_ID, $typeId, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId('fooValue');   // WHERE user_id = 'fooValue'
     * $query->filterByUserId('%fooValue%'); // WHERE user_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $userId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($userId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $userId)) {
                $userId = str_replace('*', '%', $userId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the age_limit column
     *
     * Example usage:
     * <code>
     * $query->filterByAgeLimit(1234); // WHERE age_limit = 1234
     * $query->filterByAgeLimit(array(12, 34)); // WHERE age_limit IN (12, 34)
     * $query->filterByAgeLimit(array('min' => 12)); // WHERE age_limit >= 12
     * $query->filterByAgeLimit(array('max' => 12)); // WHERE age_limit <= 12
     * </code>
     *
     * @param     mixed $ageLimit The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByAgeLimit($ageLimit = null, $comparison = null)
    {
        if (is_array($ageLimit)) {
            $useMinMax = false;
            if (isset($ageLimit['min'])) {
                $this->addUsingAlias(MediaPeer::AGE_LIMIT, $ageLimit['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ageLimit['max'])) {
                $this->addUsingAlias(MediaPeer::AGE_LIMIT, $ageLimit['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MediaPeer::AGE_LIMIT, $ageLimit, $comparison);
    }

    /**
     * Filter the query on the create_date column
     *
     * Example usage:
     * <code>
     * $query->filterByCreateDate('2011-03-14'); // WHERE create_date = '2011-03-14'
     * $query->filterByCreateDate('now'); // WHERE create_date = '2011-03-14'
     * $query->filterByCreateDate(array('max' => 'yesterday')); // WHERE create_date < '2011-03-13'
     * </code>
     *
     * @param     mixed $createDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByCreateDate($createDate = null, $comparison = null)
    {
        if (is_array($createDate)) {
            $useMinMax = false;
            if (isset($createDate['min'])) {
                $this->addUsingAlias(MediaPeer::CREATE_DATE, $createDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createDate['max'])) {
                $this->addUsingAlias(MediaPeer::CREATE_DATE, $createDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MediaPeer::CREATE_DATE, $createDate, $comparison);
    }

    /**
     * Filter the query on the release_date column
     *
     * Example usage:
     * <code>
     * $query->filterByReleaseDate('2011-03-14'); // WHERE release_date = '2011-03-14'
     * $query->filterByReleaseDate('now'); // WHERE release_date = '2011-03-14'
     * $query->filterByReleaseDate(array('max' => 'yesterday')); // WHERE release_date < '2011-03-13'
     * </code>
     *
     * @param     mixed $releaseDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByReleaseDate($releaseDate = null, $comparison = null)
    {
        if (is_array($releaseDate)) {
            $useMinMax = false;
            if (isset($releaseDate['min'])) {
                $this->addUsingAlias(MediaPeer::RELEASE_DATE, $releaseDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($releaseDate['max'])) {
                $this->addUsingAlias(MediaPeer::RELEASE_DATE, $releaseDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MediaPeer::RELEASE_DATE, $releaseDate, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MediaPeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query by a related Distributor object
     *
     * @param   Distributor|PropelObjectCollection $distributor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByDistributor($distributor, $comparison = null)
    {
        if ($distributor instanceof Distributor) {
            return $this
                ->addUsingAlias(MediaPeer::DISTRIBUTOR_ID, $distributor->getId(), $comparison);
        } elseif ($distributor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MediaPeer::DISTRIBUTOR_ID, $distributor->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByDistributor() only accepts arguments of type Distributor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Distributor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinDistributor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Distributor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Distributor');
        }

        return $this;
    }

    /**
     * Use the Distributor relation Distributor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\DistributorQuery A secondary query class using the current class as primary query
     */
    public function useDistributorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDistributor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Distributor', '\Database\Media\DistributorQuery');
    }

    /**
     * Filter the query by a related Edition object
     *
     * @param   Edition|PropelObjectCollection $edition The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByEdition($edition, $comparison = null)
    {
        if ($edition instanceof Edition) {
            return $this
                ->addUsingAlias(MediaPeer::EDITION_ID, $edition->getId(), $comparison);
        } elseif ($edition instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MediaPeer::EDITION_ID, $edition->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByEdition() only accepts arguments of type Edition or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Edition relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinEdition($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Edition');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Edition');
        }

        return $this;
    }

    /**
     * Use the Edition relation Edition object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\EditionQuery A secondary query class using the current class as primary query
     */
    public function useEditionQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinEdition($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Edition', '\Database\Media\EditionQuery');
    }

    /**
     * Filter the query by a related Type object
     *
     * @param   Type|PropelObjectCollection $type The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByType($type, $comparison = null)
    {
        if ($type instanceof Type) {
            return $this
                ->addUsingAlias(MediaPeer::TYPE_ID, $type->getId(), $comparison);
        } elseif ($type instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MediaPeer::TYPE_ID, $type->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByType() only accepts arguments of type Type or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Type relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinType($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Type');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Type');
        }

        return $this;
    }

    /**
     * Use the Type relation Type object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\TypeQuery A secondary query class using the current class as primary query
     */
    public function useTypeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinType($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Type', '\Database\Media\TypeQuery');
    }

    /**
     * Filter the query by a related User object
     *
     * @param   User|PropelObjectCollection $user The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByUser($user, $comparison = null)
    {
        if ($user instanceof User) {
            return $this
                ->addUsingAlias(MediaPeer::USER_ID, $user->getId(), $comparison);
        } elseif ($user instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MediaPeer::USER_ID, $user->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByUser() only accepts arguments of type User or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the User relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('User');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'User');
        }

        return $this;
    }

    /**
     * Use the User relation User object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\User\UserQuery A secondary query class using the current class as primary query
     */
    public function useUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'User', '\Database\User\UserQuery');
    }

    /**
     * Filter the query by a related Audio object
     *
     * @param   Audio|PropelObjectCollection $audio  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByAudio($audio, $comparison = null)
    {
        if ($audio instanceof Audio) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $audio->getMediaId(), $comparison);
        } elseif ($audio instanceof PropelObjectCollection) {
            return $this
                ->useAudioQuery()
                ->filterByPrimaryKeys($audio->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByAudio() only accepts arguments of type Audio or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Audio relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinAudio($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Audio');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Audio');
        }

        return $this;
    }

    /**
     * Use the Audio relation Audio object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\AudioQuery A secondary query class using the current class as primary query
     */
    public function useAudioQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinAudio($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Audio', '\Database\Media\AudioQuery');
    }

    /**
     * Filter the query by a related Book object
     *
     * @param   Book|PropelObjectCollection $book  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByBook($book, $comparison = null)
    {
        if ($book instanceof Book) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $book->getMediaId(), $comparison);
        } elseif ($book instanceof PropelObjectCollection) {
            return $this
                ->useBookQuery()
                ->filterByPrimaryKeys($book->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBook() only accepts arguments of type Book or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Book relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinBook($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Book');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Book');
        }

        return $this;
    }

    /**
     * Use the Book relation Book object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\BookQuery A secondary query class using the current class as primary query
     */
    public function useBookQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBook($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Book', '\Database\Media\BookQuery');
    }

    /**
     * Filter the query by a related Video object
     *
     * @param   Video|PropelObjectCollection $video  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByVideo($video, $comparison = null)
    {
        if ($video instanceof Video) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $video->getMediaId(), $comparison);
        } elseif ($video instanceof PropelObjectCollection) {
            return $this
                ->useVideoQuery()
                ->filterByPrimaryKeys($video->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByVideo() only accepts arguments of type Video or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Video relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinVideo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Video');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Video');
        }

        return $this;
    }

    /**
     * Use the Video relation Video object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\VideoQuery A secondary query class using the current class as primary query
     */
    public function useVideoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinVideo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Video', '\Database\Media\VideoQuery');
    }

    /**
     * Filter the query by a related Game object
     *
     * @param   Game|PropelObjectCollection $game  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByGame($game, $comparison = null)
    {
        if ($game instanceof Game) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $game->getMediaId(), $comparison);
        } elseif ($game instanceof PropelObjectCollection) {
            return $this
                ->useGameQuery()
                ->filterByPrimaryKeys($game->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByGame() only accepts arguments of type Game or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Game relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinGame($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Game');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Game');
        }

        return $this;
    }

    /**
     * Use the Game relation Game object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\GameQuery A secondary query class using the current class as primary query
     */
    public function useGameQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinGame($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Game', '\Database\Media\GameQuery');
    }

    /**
     * Filter the query by a related Comment object
     *
     * @param   Comment|PropelObjectCollection $comment  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByComment($comment, $comparison = null)
    {
        if ($comment instanceof Comment) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $comment->getMediaId(), $comparison);
        } elseif ($comment instanceof PropelObjectCollection) {
            return $this
                ->useCommentQuery()
                ->filterByPrimaryKeys($comment->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByComment() only accepts arguments of type Comment or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Comment relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinComment($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Comment');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Comment');
        }

        return $this;
    }

    /**
     * Use the Comment relation Comment object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\CommentQuery A secondary query class using the current class as primary query
     */
    public function useCommentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinComment($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Comment', '\Database\Media\CommentQuery');
    }

    /**
     * Filter the query by a related MediaToArtist object
     *
     * @param   MediaToArtist|PropelObjectCollection $mediaToArtist  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByMediaToArtist($mediaToArtist, $comparison = null)
    {
        if ($mediaToArtist instanceof MediaToArtist) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $mediaToArtist->getMediaId(), $comparison);
        } elseif ($mediaToArtist instanceof PropelObjectCollection) {
            return $this
                ->useMediaToArtistQuery()
                ->filterByPrimaryKeys($mediaToArtist->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMediaToArtist() only accepts arguments of type MediaToArtist or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MediaToArtist relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinMediaToArtist($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MediaToArtist');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MediaToArtist');
        }

        return $this;
    }

    /**
     * Use the MediaToArtist relation MediaToArtist object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\MediaToArtistQuery A secondary query class using the current class as primary query
     */
    public function useMediaToArtistQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinMediaToArtist($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MediaToArtist', '\Database\Media\MediaToArtistQuery');
    }

    /**
     * Filter the query by a related MediaToGenre object
     *
     * @param   MediaToGenre|PropelObjectCollection $mediaToGenre  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByMediaToGenre($mediaToGenre, $comparison = null)
    {
        if ($mediaToGenre instanceof MediaToGenre) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $mediaToGenre->getMediaId(), $comparison);
        } elseif ($mediaToGenre instanceof PropelObjectCollection) {
            return $this
                ->useMediaToGenreQuery()
                ->filterByPrimaryKeys($mediaToGenre->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMediaToGenre() only accepts arguments of type MediaToGenre or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MediaToGenre relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinMediaToGenre($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MediaToGenre');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MediaToGenre');
        }

        return $this;
    }

    /**
     * Use the MediaToGenre relation MediaToGenre object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\MediaToGenreQuery A secondary query class using the current class as primary query
     */
    public function useMediaToGenreQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinMediaToGenre($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MediaToGenre', '\Database\Media\MediaToGenreQuery');
    }

    /**
     * Filter the query by a related MediaToLanguage object
     *
     * @param   MediaToLanguage|PropelObjectCollection $mediaToLanguage  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 MediaQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByMediaToLanguage($mediaToLanguage, $comparison = null)
    {
        if ($mediaToLanguage instanceof MediaToLanguage) {
            return $this
                ->addUsingAlias(MediaPeer::ID, $mediaToLanguage->getMediaId(), $comparison);
        } elseif ($mediaToLanguage instanceof PropelObjectCollection) {
            return $this
                ->useMediaToLanguageQuery()
                ->filterByPrimaryKeys($mediaToLanguage->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByMediaToLanguage() only accepts arguments of type MediaToLanguage or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the MediaToLanguage relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function joinMediaToLanguage($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('MediaToLanguage');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'MediaToLanguage');
        }

        return $this;
    }

    /**
     * Use the MediaToLanguage relation MediaToLanguage object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   \Database\Media\MediaToLanguageQuery A secondary query class using the current class as primary query
     */
    public function useMediaToLanguageQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinMediaToLanguage($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'MediaToLanguage', '\Database\Media\MediaToLanguageQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Media $media Object to remove from the list of results
     *
     * @return MediaQuery The current query, for fluid interface
     */
    public function prune($media = null)
    {
        if ($media) {
            $this->addUsingAlias(MediaPeer::ID, $media->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
